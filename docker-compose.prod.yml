version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fenertravel_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fenertravel_db
      POSTGRES_USER: fenertravel_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - fenertravel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fenertravel_user -d fenertravel_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Fener Travel Application
  app:
    build: .
    container_name: fenertravel_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5030
      DATABASE_URL: postgresql://fenertravel_user:${POSTGRES_PASSWORD:-your_secure_password_here}@postgres:5432/fenertravel_db
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5030}
    ports:
      - "5030:5030"
    networks:
      - fenertravel_network
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5030/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Optional Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: fenertravel_nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - fenertravel_network

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  fenertravel_network:
    driver: bridge
